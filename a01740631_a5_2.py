# -*- coding: utf-8 -*-
"""A01740631_A5.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YqsK4afjqDIHgtbxCcOX9eIyqTJP2b2j

**INSTITUTO TECNOLÓGICO Y DE ESTUDIOS SUPERIORES DE MONTERREY CAMPUS EDUCACIÓN DIGITAL**

**ASIGNATURA:**
PRUEBAS DE SOFTWARE Y ASEGURAMIENTO DE LA CALIDAD

**ACTIVIDAD 5.2:**
EJERCICIO DE PROGRAMACIÓN 2 Y ANÁLISIS ESTÁTICO

**ESTUDIANTE:**
ESTEBAN SÁNCHEZ RETAMOZA A01740631

**EQUIPO DOCENTE:**
DR. GERARDO PADILLA ZÁRATE PROFESOR TITULAR &
MTRA. YETNALEZI QUINTAS RUIZ PROFESOR ASISTENTE
"""

"""
Compute Total Sales.
"""

import time
import json
from google.colab import files


def compute_total_sales(prices, sales):
    """
    Calcula el costo total de ventas a partir de los precios y los registros
    de ventas.
    """
    sales_details = []
    total_cost = 0
    for sale in sales:
        product_name, quantity = sale['Product'], sale['Quantity']
        # Usar una variable intermedia para la expresión generadora
        matching_prices = (
            item['price'] for item in prices if item['title'] == product_name
        )
        price = next(matching_prices, None)
        if price is not None:
            sale_cost = price * quantity
            total_cost += sale_cost
            sales_details.append((product_name, quantity, sale_cost))
        else:
            print(
                f"Advertencia: Producto '{product_name}' no encontrado."
            )
    return total_cost, sales_details


def read_json_from_uploaded_file(uploaded_file):
    """Lee y devuelve el contenido de un archivo JSON cargado."""
    try:
        return json.loads(uploaded_file.decode('utf-8'))
    except json.JSONDecodeError:
        print("Error: No se pudo decodificar el archivo JSON.")
        return None


def main():
    """Carga de archivos, cálculo y visualización de resultados."""
    start_time = time.time()

    print("Por favor, suba el archivo del catálogo de precios:")
    uploaded_prices = files.upload()
    price_file_name = next(iter(uploaded_prices))
    prices = read_json_from_uploaded_file(uploaded_prices[price_file_name])

    print("Por favor, suba el archivo de registro de ventas:")
    uploaded_sales = files.upload()
    sales_file_name = next(iter(uploaded_sales))
    sales = read_json_from_uploaded_file(uploaded_sales[sales_file_name])

    if prices and sales:
        total_cost, sales_details = compute_total_sales(prices, sales)

        result_file_name = "SalesResults.txt"
        with open(result_file_name, 'w', encoding='utf-8') as file:
            for detail in sales_details:
                file.write(
                    f"Producto: {detail[0]}, Cantidad: {detail[1]}, "
                    f"Costo de Venta: ${detail[2]:.2f}\n"
                )
            file.write(f"\nCosto Total de Ventas: ${total_cost:.2f}\n")

        end_time = time.time()
        print(
            f"Tiempo: {end_time - start_time:.2f} seg. R en {result_file_name}"
        )

        # Imprimir detalles de ventas en la consola
        for detail in sales_details:
            print(
                f"Producto: {detail[0]}, Cantidad: {detail[1]}, "
                f"Costo de Venta: ${detail[2]:.2f}"
            )
        print(f"\nCosto Total de Ventas: ${total_cost:.2f}")

        # Descargar el archivo de resultados
        files.download(result_file_name)


if __name__ == "__main__":
    main()

"""**Convertirlo en .py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile compute_totalsales.py
# """
# Compute Total Sales.
# """
# 
# import time
# import json
# from google.colab import files
# 
# 
# def compute_total_sales(prices, sales):
#     """
#     Calcula el costo total de ventas a partir de los precios y los registros
#     de ventas.
#     """
#     sales_details = []
#     total_cost = 0
#     for sale in sales:
#         product_name, quantity = sale['Product'], sale['Quantity']
#         # Usar una variable intermedia para la expresión generadora
#         matching_prices = (
#             item['price'] for item in prices if item['title'] == product_name
#         )
#         price = next(matching_prices, None)
#         if price is not None:
#             sale_cost = price * quantity
#             total_cost += sale_cost
#             sales_details.append((product_name, quantity, sale_cost))
#         else:
#             print(
#                 f"Advertencia: Producto '{product_name}' no encontrado."
#             )
#     return total_cost, sales_details
# 
# 
# def read_json_from_uploaded_file(uploaded_file):
#     """Lee y devuelve el contenido de un archivo JSON cargado."""
#     try:
#         return json.loads(uploaded_file.decode('utf-8'))
#     except json.JSONDecodeError:
#         print("Error: No se pudo decodificar el archivo JSON.")
#         return None
# 
# 
# def main():
#     """Carga de archivos, cálculo y visualización de resultados."""
#     start_time = time.time()
# 
#     print("Por favor, suba el archivo del catálogo de precios:")
#     uploaded_prices = files.upload()
#     price_file_name = next(iter(uploaded_prices))
#     prices = read_json_from_uploaded_file(uploaded_prices[price_file_name])
# 
#     print("Por favor, suba el archivo de registro de ventas:")
#     uploaded_sales = files.upload()
#     sales_file_name = next(iter(uploaded_sales))
#     sales = read_json_from_uploaded_file(uploaded_sales[sales_file_name])
# 
#     if prices and sales:
#         total_cost, sales_details = compute_total_sales(prices, sales)
# 
#         result_file_name = "SalesResults.txt"
#         with open(result_file_name, 'w', encoding='utf-8') as file:
#             for detail in sales_details:
#                 file.write(
#                     f"Producto: {detail[0]}, Cantidad: {detail[1]}, "
#                     f"Costo de Venta: ${detail[2]:.2f}\n"
#                 )
#             file.write(f"\nCosto Total de Ventas: ${total_cost:.2f}\n")
# 
#         end_time = time.time()
#         print(
#             f"Tiempo: {end_time - start_time:.2f} seg. R en {result_file_name}"
#         )
# 
#         # Imprimir detalles de ventas en la consola
#         for detail in sales_details:
#             print(
#                 f"Producto: {detail[0]}, Cantidad: {detail[1]}, "
#                 f"Costo de Venta: ${detail[2]:.2f}"
#             )
#         print(f"\nCosto Total de Ventas: ${total_cost:.2f}")
# 
#         # Descargar el archivo de resultados
#         files.download(result_file_name)
# 
# 
# if __name__ == "__main__":
#     main()

"""**Pylint**"""

!pip install pylint

!pylint compute_totalsales.py

"""**Flake8**"""

!pip install flake8

!flake8 compute_totalsales.py